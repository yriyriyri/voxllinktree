function drawWireframe() {
      ctx.clearRect(0, 0, htmlCanvas.width, htmlCanvas.height);
      ctx.fillStyle = "#FFFFFF"; 
      ctx.fillRect(0, 0, htmlCanvas.width, htmlCanvas.height); 
      ctx.imageSmoothingEnabled = false;
      ctx.globalCompositeOperation = "source-over";
    
      const defaultFontSize = 16;
      const smallFontSize = 10;
      ctx.fillStyle = "#000000"; //
      const lineWidth = defaultFontSize / 12;
    
      ctx.lineWidth = lineWidth;
      ctx.strokeStyle = "#000000"; //
    
      function drawSVG(img: HTMLImageElement, x: number, y: number, width: number, height: number) {
        if (img.complete) {
          ctx.drawImage(img, x, y, width, height); 
        } else {
          return
        }
      }
    
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        const fontSize = i >= nodes.length - 2 ? smallFontSize : defaultFontSize;
      
        for (let j = i + 1; j < nodes.length; j++) {
          const targetNode = nodes[j];
          const targetFontSize = j >= nodes.length - 2 ? smallFontSize : defaultFontSize;
          const charWidth = fontSize * 0.6;
          const targetCharWidth = targetFontSize * 0.6;
          const boxWidth = (textArray[i]?.length + 4 || 0) * charWidth;
          const targetBoxWidth = (textArray[j]?.length + 4 || 0) * targetCharWidth;
          const endX = targetNode.x - targetBoxWidth / 2;
          const endY = targetNode.y;
          const dx = endX - node.x;
          const dy = endY - node.y;
          const distance = Math.sqrt(dx * dx + dy * dy);
      
          let lineOpacity;
          
          if ((i === numNodes && j === numNodes + 1) || (i === numNodes + 1 && j === numNodes)) {
            lineOpacity = Math.max(0.5, 1 - distance / lineOpacityMultiplier);
          } else {
            lineOpacity = Math.max(0, 1 - distance / lineOpacityMultiplier);
          }
      
          if (lineOpacity > 0) {
            const whiteRatio = Math.max(1, Math.round(10 * lineOpacity)); //
            const blackRatio = Math.max(1, Math.round(10 * (1 - lineOpacity))); //
            ctx.setLineDash([whiteRatio, blackRatio]);
            ctx.globalAlpha = 1;
            ctx.beginPath();
            ctx.moveTo(node.x, node.y);
            ctx.lineTo(targetNode.x, targetNode.y);
            ctx.stroke();
            ctx.setLineDash([]);
          }
        }
      }
    
      for (let i = 0; i < nodes.length; i++) {
        const node = nodes[i];
        const isSpecialNode = i > numNodes -1; 
        const fontSize = isSpecialNode
          ? i === numNodes + 1 
            ? 12 
            : 16 
          : i >= nodes.length - 4
          ? smallFontSize
          : defaultFontSize;
        ctx.font = `${fontSize}px "dico-code-two", monospace`;
      
        ctx.textBaseline = "top";
      
        const charWidth = fontSize * 0.6;
        let boxWidth = (textArray[i]?.length + 4 || 0) * charWidth;
        const boxHeight = fontSize * 3;
      
        let x = node.x - boxWidth / 2;
        let y = node.y - boxHeight / 2;
      
        if (isSpecialNode) {
          if (i === numNodes) {
            const leftWall = `| `
            const loadingBar = `█████▓▓▓▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░`;
            const statsLeft = ` [`;
            const statsMiddle = `???`;
            const statsRight = `/304]`;
            const rightWall = ` |`;
            const textWidth = ctx.measureText(`${leftWall}${loadingBar}${statsLeft}${statsMiddle}${statsRight}${rightWall}`).width;
            const topBorder = `+${"-".repeat(leftWall.length + loadingBar.length + statsLeft.length + statsMiddle.length + statsRight.length + rightWall.length - 2 || 0)}+`;
            const bottomBorder = topBorder;
        
            ctx.fillStyle = "#FFFFFF"; //
            ctx.fillRect(x, y, textWidth, boxHeight);

            ctx.fillStyle = "#000000"; //
            ctx.fillText(topBorder, x, y);
            ctx.fillText(leftWall, x, y + fontSize);

            const leftWallWidth = ctx.measureText(leftWall).width;
            const loadingBarWidth = ctx.measureText(loadingBar).width;

            ctx.fillStyle = "red"
            ctx.fillRect(x + leftWallWidth, y + fontSize, loadingBarWidth, fontSize);

            ctx.fillStyle = "purple"; 
            ctx.fillText(loadingBar, x + leftWallWidth, y + fontSize);
        
            ctx.fillStyle = "#4AF626"; 
            ctx.fillText(statsLeft, x + leftWallWidth + loadingBarWidth, y + fontSize);
        
            const statsLeftWidth = ctx.measureText(statsLeft).width;
            ctx.fillStyle = "#FF0000"; 
            ctx.fillText(statsMiddle, x + leftWallWidth + loadingBarWidth + statsLeftWidth, y + fontSize);
        
            const statsMiddleWidth = ctx.measureText(statsMiddle).width;
            ctx.fillStyle = "#4AF626"; 
            ctx.fillText(statsRight, x + leftWallWidth + loadingBarWidth + statsLeftWidth + statsMiddleWidth, y + fontSize);
        
            const statsRightWidth = ctx.measureText(statsRight).width;
            ctx.fillStyle = "#000000"; //
            ctx.fillText(rightWall, x + leftWallWidth + loadingBarWidth + statsLeftWidth + statsMiddleWidth + statsRightWidth, y + fontSize);
        
            ctx.fillStyle = "#000000"; //
            ctx.fillText(bottomBorder, x, y + fontSize * 2);
        
            node.boundingBox = {
              left: x,
              right: x + textWidth,
              top: y,
              bottom: y + boxHeight,
              width: textWidth,
              height: boxHeight,
            }

          } else if (i === numNodes + 1) {
            const paddedText = `| ${textArray[i] || ""} `;
            const returnValue = `[UNDEFINED]`
            const rightWall = ` |`;
            const textWidth = ctx.measureText(`${paddedText}${returnValue}${rightWall}`).width
            const topBorder = `+${"-".repeat(paddedText.length+returnValue.length+rightWall.length-2)}+`;
            const bottomBorder = topBorder;
        
            ctx.fillStyle = "#FFFFFF"; //
            ctx.fillRect(x, y, textWidth, boxHeight);
        
            ctx.fillStyle = "#000000"; //
            ctx.fillText(topBorder, x, y);
            ctx.fillText(paddedText, x, y + fontSize);
            ctx.fillText(bottomBorder, x, y + fontSize * 2);

            const paddedTextWidth = ctx.measureText(paddedText).width
            const returnValueWidth = ctx.measureText(returnValue).width
            ctx.fillStyle =`#0000FF`
            ctx.fillRect(x + paddedTextWidth, y + fontSize, returnValueWidth, fontSize);
            ctx.fillStyle = "#FF0000"
            ctx.fillText(returnValue, x + paddedTextWidth,y+fontSize)

            
            ctx.fillStyle = "#000000" //
            ctx.fillText(rightWall, x + paddedTextWidth+returnValueWidth,y+fontSize)
        
            if (i === hoveredNodeIndex) {
              const underlineY = y + fontSize * 2;
              const textWidth = ctx.measureText(textArray[i] || "").width;
              ctx.strokeStyle = "#000000"; //
              ctx.lineWidth = 1.2;
              ctx.beginPath();
              ctx.moveTo(x + ctx.measureText("--").width, underlineY);
              ctx.lineTo(x + ctx.measureText("--").width + textWidth, underlineY);
              ctx.stroke();
            }
        
            node.boundingBox = {
              left: x,
              right: x + textWidth,
              top: y,
              bottom: y + boxHeight,
              width: textWidth,
              height: boxHeight,
            };
          }
        } else if (Object.keys(svgIcons).includes(textArray[i])) {
          const svgEntry = svgIcons[textArray[i] as keyof typeof svgIcons];
          const svgColor = svgEntry.color || "#000000"; //
      
          const topBorderStr = `+${"-".repeat(textArray[i]?.length + 7 || 0)}+`;
          const bottomBorderStr = topBorderStr;
          const textBeforeBrackets = `| ${textArray[i] || ""} `;
          const brackets = "[  ]";
          const rightWall = "|";
      
          const measurementString = `${textBeforeBrackets}${brackets} ${rightWall}`;
          const measuredWidth = ctx.measureText(measurementString).width;
      
          boxWidth = measuredWidth;
          x = node.x - measuredWidth / 2;
          y = node.y - boxHeight / 2;
      
          ctx.fillStyle = "#FFFFFF"; //
          ctx.fillRect(x, y, measuredWidth, boxHeight);
      
          ctx.fillStyle = "#000000"; //
          ctx.fillText(topBorderStr, x, y);
          ctx.fillText(bottomBorderStr, x, y + fontSize * 2);
      
          ctx.fillStyle = "#000000"; //
          ctx.fillText(textBeforeBrackets, x, y + fontSize);
      
          ctx.fillStyle = svgColor;
          const bracketsX = x + ctx.measureText(textBeforeBrackets).width;
          ctx.fillText(brackets, bracketsX, y + fontSize);
      
          const svgWidth = 19.2;
          const svgHeight = 19.2;
          const svgIconX = bracketsX + ctx.measureText("-").width;
          drawSVG(svgEntry.img, svgIconX, y + fontSize - 3.2, svgWidth, svgHeight);
      
          ctx.fillStyle = "#000000"; //
          const rightWallX = bracketsX + ctx.measureText(brackets).width + ctx.measureText(" ").width;
          ctx.fillText(rightWall, rightWallX, y + fontSize);
      
          if (i === hoveredNodeIndex) {
            const underlineY = y + fontSize * 2;
            const textWidth = ctx.measureText(textArray[i] || "").width;
            ctx.strokeStyle = "#000000"; //
            ctx.lineWidth = 1.2;
            ctx.beginPath();
            ctx.moveTo(x + ctx.measureText("--").width, underlineY);
            ctx.lineTo(x + ctx.measureText("--").width + textWidth, underlineY);
            ctx.stroke();
          }
      
          node.boundingBox = {
            left: x,
            right: x + measuredWidth,
            top: y,
            bottom: y + boxHeight,
            width: measuredWidth,
            height: boxHeight,
          };
        } else {
          const topBorder = `+${"-".repeat(textArray[i]?.length + 2 || 0)}+`;
          const bottomBorder = topBorder;
          const paddedText = `| ${textArray[i] || ""} |`;
      
          ctx.fillStyle = "#FFFFFF"; //
          ctx.fillRect(x, y, boxWidth, boxHeight);
      
          ctx.fillStyle = "#000000"; //
          ctx.fillText(topBorder, x, y);
          ctx.fillText(paddedText, x, y + fontSize);
          ctx.fillText(bottomBorder, x, y + fontSize * 2);
      
          if (i === hoveredNodeIndex) {
            const underlineY = y + fontSize * 2;
            const textWidth = ctx.measureText(textArray[i] || "").width;
            ctx.strokeStyle = "#000000"; //
            ctx.lineWidth = 1.2;
            ctx.beginPath();
            ctx.moveTo(x + ctx.measureText("--").width, underlineY);
            ctx.lineTo(x + ctx.measureText("--").width + textWidth, underlineY);
            ctx.stroke();
          }
      
          node.boundingBox = {
            left: x,
            right: x + boxWidth,
            top: y,
            bottom: y + boxHeight,
            width: boxWidth,
            height: boxHeight,
          };
        }
      }

      // ctx.strokeStyle = "red"; 
      // ctx.lineWidth = 2; 

      // const { spawnXStart, spawnXEnd, spawnYStart, spawnYEnd } = spawnZone.current;
      // const debugWidth = spawnXEnd - spawnXStart;
      // const debugHeight = spawnYEnd - spawnYStart;

      // ctx.strokeRect(spawnXStart, spawnYStart, debugWidth, debugHeight);
    }